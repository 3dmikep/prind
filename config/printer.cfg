# This file contains pin mappings for the stock 2022 Creality Ender 3
# S1 Plus. To use this config check the STM32 Chip on the Mainboard,
# during "make menuconfig" select accordingly either the
# STM32F103 with "28KiB bootloader" or the STM32F401 with
# "64KiB bootloader" and serial (on USART1 PA10/PA9) for both.

# For a direct serial connection, in "make menuconfig" select
# "Enable extra low-level configuration options" and  Serial
# (on USART2 PA3/PA2), which is on the 10 pin IDC cable used
# for the LCD module as follows: 3: Tx, 4: Rx, 9: GND, 10: VCC

# Flash this firmware by copying "out/klipper.bin" to a SD card and
# turning on the printer with the card inserted. The filename
# must be changed to "firmware.bin"

# With STM32F401, you might need to put "firmware.bin" in a
# folder on the SD card called "STM32F4_UPDATE" in order to flash.

# See docs/Config_Reference.md for a description of parameters.

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[stepper_x]
step_pin: PC2
dir_pin: PB9
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA5
position_endstop: -10
position_max: 316
position_min: -15
homing_speed: 50

[stepper_y]
step_pin: PB8
dir_pin: PB7
enable_pin: !PC3
microsteps: 16
rotation_distance: 40
endstop_pin: !PA6
position_endstop: -10
position_max: 304
position_min: -15
homing_speed: 50

[stepper_z]
step_pin: PB6
dir_pin: !PB5
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 300
position_min: -6

[extruder]
step_pin: PB4
dir_pin: PB3
enable_pin: !PC3
microsteps: 16
gear_ratio: 42:12
rotation_distance: 26.359
nozzle_diameter: 1
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
control: pid
pid_Kp: 23.561
pid_Ki: 1.208
pid_Kd: 114.859
min_temp: 0
max_temp: 260

[heater_bed]
heater_pin: PA7
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control: pid
pid_Kp: 71.867
pid_Ki: 1.536
pid_Kd: 840.843
min_temp: 0
max_temp: 100

[heater_fan hotend_fan]
pin: PC0

[fan]
pin: PA0

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2000
max_z_velocity: 5
max_z_accel: 100

[bltouch]
sensor_pin: ^PC14
control_pin: PC13
x_offset: -31.8
y_offset: -40.5
z_offset: 3.7
probe_with_touch_mode: true
stow_on_each_sample: false

[bed_mesh]
speed: 120
mesh_min: 20, 20
mesh_max: 283, 253
probe_count: 4,4
algorithm: bicubic

[safe_z_home]
home_xy_position: 187, 192
speed: 75
z_hop: 10
z_hop_speed: 5
move_to_previous: true

[filament_switch_sensor e0_sensor]
switch_pin: !PC15
pause_on_runout: true
runout_gcode: PAUSE

[pause_resume]
recover_velocity: 25

[verify_heater extruder]
heating_gain: 2
check_gain_time:9999999999
hysteresis: 10
max_error: 130

#[include mainsail.cfg]

[virtual_sdcard]
path: /opt/printer_data/gcodes

[display_status]

[pause_resume]

[gcode_macro START_PRINT]
gcode:
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    M140 S0 ; set final bed temp
    M104 S150 ; set temporary nozzle temp to prevent oozing during homing and auto bed leveling
    M190 S0 ; wait for bed temp to stabilize
    G28 ; home all axis
    G29 ; auto bed levelling
    G1 Z50 F240
    G1 X2 Y10 F3000
    M104 S{215} ; set final nozzle temp
    M109 S{215} ; wait for nozzle temp to stabilize
    G1 Z0.28 F240
    G92 E0
    G1 Y140 E10 F1500 ; prime the nozzle
    G1 X2.3 F5000
    G92 E0
    G1 Y10 E10 F1200 ; prime the nozzle
    G92 E0

[gcode_macro END_PRINT]
gcode:
      M140 S0 ; turn off heatbed
      M104 S0 ; turn off temperature
      M107 ; turn off fan
      M84 X Y E ; disable motors

[gcode_macro SET_NOZZLE]
description: Set values based on nozzle diameter
variable_nozzle: 0
gcode:
    {% set NOZZLE = params.NOZZLE|default(0.4)|float %} ; Get nozzle diameter from slicer
    SET_GCODE_VARIABLE MACRO=SET_NOZZLE VARIABLE=nozzle VALUE={NOZZLE} ; Save the nozzle diameter to a variable just because
    {% if NOZZLE == 0.4 %} ; If nozzle diameter is 0.4
        ## Set z_offset settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {% elif NOZZLE == 0.2 %} ; If nozzle diameter is 0.2
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {%else %} ; If any other nozzle diameter
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {% endif %}

[gcode_macro SET_MATERIAL]
description: Set values based on material type
variable_material: ''
gcode:
    {% set MATERIAL = params.MATERIAL|default('PLA')|string %} ; Get material type from slicer
    SET_GCODE_VARIABLE MACRO=SET_MATERIAL VARIABLE=material VALUE='"{MATERIAL}'" ; Save the material type to a variable just because
    {% if MATERIAL == 'PLA' %} ; If material type is PLA
        BED_MESH_PROFILE LOAD="pla_mesh" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
        SET_VELOCITY_LIMIT VELOCITY=100 ACCEL=2000 ; Set max speed/acceleration
        SET_INPUT_SHAPER SHAPER_FREQ_X=58.6 SHAPER_FREQ_Y=34.2 SHAPER_TYPE_X=mzv SHAPER_TYPE_Y=mzv ; Set input_shaper
    {% elif MATERIAL == 'ABS' %} ; If material type is ABS
        BED_MESH_PROFILE LOAD="abs_mesh" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {%else %} ; If any other material type
        BED_MESH_PROFILE LOAD="default" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
    {% endif %}

[gcode_macro TIMELAPSE_TAKE_FRAME]
gcode:
  G92 E0


[gcode_macro AFTER_LAYER_CHANGE]
gcode:

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE


